% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_presence_and_variation.R
\name{validate_presence_and_variation}
\alias{validate_presence_and_variation}
\title{Validate Variable Presence, Type, and Variation in a Dataset}
\usage{
validate_presence_and_variation(
  data,
  variables,
  outcome_list = NULL,
  hardstop = FALSE,
  variable_type = "numeric"
)
}
\arguments{
\item{data}{A data frame to validate.}

\item{variables}{A character vector of column names to check.}

\item{outcome_list}{Optional. A vector of valid values. If provided, the function checks that all values
in the variables are included in this list (after removing \code{NA}s).}

\item{hardstop}{Logical. If \code{TRUE}, the function stops on failure. If \code{FALSE} (default), it issues a warning.}

\item{variable_type}{Either \code{"numeric"}, \code{"string"}, or \code{FALSE}. If \code{"numeric"} or \code{"string"}, the function checks
that each column has the corresponding type. If \code{FALSE}, skips type checking.}
}
\value{
Invisibly returns \code{NULL}, but throws an error or warning if any checks fail.
}
\description{
Checks that specified variables are present in a data frame, have variation, match expected types,
and (optionally) only include values from a predefined list. You can choose whether to \code{stop()} on failures
or issue warnings instead.
}
\details{
The function performs the following checks on each variable:
\itemize{
\item It is present in the dataset.
\item If \code{variable_type} is not \code{FALSE}, the variable must match the specified type.
\item It contains non-\code{NA} values.
\item It has variation (i.e., not all values are the same).
\item If \code{outcome_list} is provided, all non-\code{NA} values must be found in this list.
}

If \code{hardstop = TRUE}, any failure results in an error. Otherwise, failures issue warnings and the function continues.
}
\examples{
df <- data.frame(score = c(1, 2, 2, NA), category = c("A", "A", "A", "A"))
validate_presence_and_variation(df, variables = c("score", "category"), variable_type = "numeric")
validate_presence_and_variation(df, variables = c("category"), variable_type = "string", outcome_list = c("A", "B"))

}
