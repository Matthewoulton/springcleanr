expect_message(
column_validation(
data          = df,
variables     = c("treatment", "tmt_post"),
outcome_list  = c(0, 1),
hardstop      = FALSE,
variable_type = "numeric"
),
regexp = "Validation: Success\\."
)
})
df <- data.frame(
treatment = c(0, 1, 0, 1),
tmt_post  = c(1, 1, 0, 0)
)
column_validation(
data          = df,
variables     = c("treatment", "tmt_post"),
outcome_list  = c(0, 1),
hardstop      = FALSE,
variable_type = "numeric"
)
column_validation <- function(
data,
variables,
outcome_list   = NULL,
hardstop       = FALSE,
variable_type  = "numeric",  # Can be single value or vector
check_constant = TRUE,        # New: check constant-valued columns
NA_count = FALSE,
) {
column_validation <- function(
data,
variables,
outcome_list   = NULL,
hardstop       = FALSE,
variable_type  = "numeric",  # Can be single value or vector
check_constant = TRUE,        # New: check constant-valued columns
NA_count = FALSE,
) {
column_validation <- function(
data,
variables,
outcome_list   = NULL,
hardstop       = FALSE,
variable_type  = "numeric",  # Can be single value or vector
check_constant = TRUE,        # New: check constant-valued columns
NA_count = FALSE
) {
if (!is.character(variables)) {
stop("`variables` must be a character vector of column names.")
}
if (length(variable_type) > 1 && length(variable_type) != length(variables)) {
stop("`variable_type` must be length 1 or the same length as `variables`.")
}
issues_found <- character(0)
message_fun <- function(msg) {
issues_found <<- c(issues_found, msg)
}
is_expected_type <- function(x, type) {
switch(
type,
"numeric"   = is.numeric(x),
"string"    = is.character(x),
"character" = is.character(x),
TRUE
)
}
if (!is.null(outcome_list) && length(variable_type) == 1 && variable_type != FALSE) {
if (variable_type == "numeric" && !is.numeric(outcome_list)) {
stop("Provided `outcome_list` is not numeric, but `variable_type = numeric`.")
}
if (variable_type == "string" && !is.character(outcome_list)) {
stop("Provided `outcome_list` is not a character vector, but `variable_type = string`.")
}
}
for (i in seq_along(variables)) {
var_name <- variables[i]
this_type <- if (length(variable_type) == 1) variable_type else variable_type[i]
if (!var_name %in% names(data)) {
stop(paste0("No column named '", var_name, "' was found in data."))
next
}
column_vals <- data[[var_name]]
if (this_type != FALSE && !is_expected_type(column_vals, this_type)) {
message_fun(paste0(
"Column '", var_name, "' is not of type '", this_type,
"'. Consider setting `variable_type = FALSE` to skip type checks."
))
next
}
non_na_vals <- column_vals[!is.na(column_vals)]
if (length(non_na_vals) == 0) {
message_fun(paste0(
"Column '", var_name, "' has no non-NA values. Skipping variation and membership checks."
))
next
}
if (check_constant) {
unique_vals <- unique(non_na_vals)
if (length(unique_vals) == 1) {
message_fun(paste0(
"Column '", var_name, "' is constant (all values = ", unique_vals[1], ")."
))
}
}
if (isTRUE(NA_count)) {
total_rows <- length(column_vals)
na_count <- sum(is.na(column_vals))
na_pct <- round(100 * na_count / total_rows, 1)
message_fun(paste0(
"Column '", var_name, "' has ", na_count, " NA value",
if (na_count == 1) "" else "s", " (", na_pct, "%)."
))
}
if (!is.null(outcome_list)) {
not_in_list <- non_na_vals[!(non_na_vals %in% outcome_list)]
if (length(not_in_list) > 0) {
message_fun(paste0(
"Column '", var_name, "' has values not in outcome_list: ",
paste0(unique(not_in_list), collapse = ", ")
))
}
}
}
if (length(issues_found) > 0) {
full_msg <- paste(issues_found, collapse = "\n")
if (hardstop) {
stop(full_msg, call. = FALSE)
} else {
warning(full_msg, call. = FALSE)
}
} else {
message("Validation: Success.")
}
invisible(NULL)
}
column_validation(
data          = df,
variables     = c("treatment", "tmt_post"),
outcome_list  = c(0, 1),
hardstop      = FALSE,
variable_type = "numeric"
)
### tests for column_validation
### column_validation function
test_that("column_validation handles normal numeric usage correctly", {
df <- data.frame(
treatment = c(0, 1, 0, 1),
tmt_post  = c(1, 1, 0, 0)
)
expect_message(
column_validation(
data          = df,
variables     = c("treatment", "tmt_post"),
outcome_list  = c(0, 1),
hardstop      = FALSE,
variable_type = "numeric"
),
regexp = "Validation: Success\\."
)
})
test_that("column_validation throws error if column is missing", {
df <- data.frame(
treatment = c(0, 0, 1)
)
expect_error(
column_validation(
data         = df,
variables    = c("treatment", "tmt_post"),
outcome_list = c(0, 1)
),
regexp = "No column named 'tmt_post'"
)
})
test_that("column_validation throws error if column is not of expected type (numeric)", {
df <- data.frame(
treatment = c("treated", "control", "treated")
)
expect_error(
column_validation(
data          = df,
variables     = "treatment",
variable_type = "numeric",
hardstop = TRUE
),
regexp = "Column 'treatment' is not of type 'numeric'"
)
})
test_that("column_validation warns if column is not of expected type (numeric) with hardstop = FALSE", {
df <- data.frame(
treatment = c("treated", "control", "treated")
)
expect_warning(
column_validation(
data          = df,
variables     = "treatment",
variable_type = "numeric",
hardstop      = FALSE
),
regexp = "Column 'treatment' is not of type 'numeric'"
)
})
test_that("column_validation throws error if column is not of expected type (string)", {
df <- data.frame(
status = factor(c("A", "B", "B", "A"))
)
expect_error(
column_validation(
data          = df,
variables     = "status",
variable_type = "string",
hardstop = TRUE
),
regexp = "Column 'status' is not of type 'string'"
)
})
test_that("column_validation warns when column is constant with hardstop = FALSE", {
df <- data.frame(
treatment = c(1, 1, 1, 1)
)
expect_warning(
column_validation(
data         = df,
variables    = "treatment",
outcome_list = c(0, 1),
hardstop     = FALSE,
variable_type = "numeric"
),
regexp = "is constant \\(all values = 1\\)"
)
})
test_that("column_validation errors when column is constant with hardstop = TRUE", {
df <- data.frame(
treatment = c(0, 0, 0, 0)
)
expect_error(
column_validation(
data      = df,
variables = "treatment",
hardstop  = TRUE,
variable_type = "numeric"
),
regexp = "is constant \\(all values = 0\\)"
)
})
test_that("column_validation warns if values are not in outcome_list (hardstop = FALSE)", {
df <- data.frame(
treatment = c(0, 2, 1)
)
expect_warning(
column_validation(
data          = df,
variables     = "treatment",
outcome_list  = c(0, 1),
variable_type = "numeric",
hardstop      = FALSE
),
regexp = "has values not in outcome_list: 2"
)
})
test_that("column_validation errors if values are not in outcome_list (hardstop = TRUE)", {
df <- data.frame(
treatment = c(0, 2, 1)
)
expect_error(
column_validation(
data          = df,
variables     = "treatment",
outcome_list  = c(0, 1),
variable_type = "numeric",
hardstop      = TRUE
),
regexp = "has values not in outcome_list: 2"
)
})
test_that("column_validation warns if a column has only NAs", {
df <- data.frame(
treatment = c(NaN, NaN, NaN)
)
expect_warning(
column_validation(
data      = df,
variables = "treatment"
),
regexp = "has no non-NA values"
)
})
test_that("column_validation allows skipping type checks (variable_type = FALSE)", {
df <- data.frame(
mixed_col = factor(c("A", "B", "C")),
x         = c(0, 1, 0)
)
expect_message(
column_validation(
data          = df,
variables     = c("mixed_col", "x"),
variable_type = FALSE
),
regexp = "Validation: Success\\."
)
})
test_that("column_validation checks outcome_list type if variable_type = 'string'", {
df <- data.frame(status = c("A", "B", "C"))
expect_error(
column_validation(
data          = df,
variables     = "status",
outcome_list  = c(1, 2),
variable_type = "string"
),
regexp = "Provided `outcome_list` is not a character vector, but `variable_type = string`\\."
)
})
test_that("column_validation checks outcome_list type if variable_type = 'numeric'", {
df <- data.frame(treatment = c(1, 0, 1))
expect_error(
column_validation(
data          = df,
variables     = "treatment",
outcome_list  = c("A", "B"),
variable_type = "numeric"
),
regexp = "Provided `outcome_list` is not numeric, but `variable_type = numeric`\\."
)
})
test_that("column_validation handles mixed variable types with vector input", {
df <- data.frame(
ID     = c(1, 2, 3),
Height = c(180, 175, 170),
Name   = c("Alice", "Bob", "Charlie"),
Age    = c(30, 25, 35),
City   = c("London", "Paris", "Berlin")
)
expect_message(
column_validation(
data          = df,
variables     = c("ID", "Height", "Name", "Age", "City"),
variable_type = c("numeric", "numeric", "string", "numeric", "string")
),
regexp = "Validation: Success\\."
)
})
test_that("column_validation errors when variable_type length mismatches variables", {
df <- data.frame(
A = c(1, 2), B = c(3, 4), C = c("x", "y")
)
expect_error(
column_validation(
data          = df,
variables     = c("A", "B", "C"),
variable_type = c("numeric", "string")  # too short
),
regexp = "`variable_type` must be length 1 or the same length as `variables`"
)
})
test_that("column_validation errors when one variable is wrong type with vector input", {
df <- data.frame(
A = c(1, 2),
B = c("x", "y")
)
expect_error(
column_validation(
data          = df,
variables     = c("A", "B"),
variable_type = c("numeric", "numeric"),  # B is not numeric
hardstop = TRUE),
regexp = "Column 'B' is not of type 'numeric'"
)
})
test_that("column_validation skips all type checks when variable_type is FALSE", {
df <- data.frame(
X = c(1, 2, 3),
Y = c("a", "b", "c")
)
expect_message(
column_validation(
data          = df,
variables     = c("X", "Y"),
variable_type = FALSE
),
regexp = "Validation: Success\\."
)
})
test_that("column_validation reports NA counts correctly when NA_count = TRUE", {
df <- data.frame(
var1 = c(1, NA, 3, NA, 5),
var2 = c("a", "b", NA, "d", "e"),
var3 = c(NA, NA, NA, NA, NA)
)
# Capture the warning message for NA_count = TRUE
expect_warning(
column_validation(
data = df,
variables = c("var1", "var2", "var3"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = TRUE
),
regexp = "NA value.*\\("
)
# Confirm that no warning is produced if NA_count = FALSE
expect_silent(
column_validation(
data = df,
variables = c("var1", "var2"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = FALSE
)
)
})
df <- data.frame(
var1 = c(1, NA, 3, NA, 5),
var2 = c("a", "b", NA, "d", "e"),
var3 = c(NA, NA, NA, NA, NA)
)
column_validation(
data = df,
variables = c("var1", "var2", "var3"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = TRUE
)
expect_warning(
column_validation(
data = df,
variables = c("var1", "var2", "var3"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = TRUE
),
regexp = "NA value.*\\("
)
column_validation(
data = df,
variables = c("var1", "var2"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = FALSE
)
test_that("column_validation reports NA counts correctly when NA_count = TRUE", {
df <- data.frame(
var1 = c(1, NA, 3, NA, 5),
var2 = c("a", "b", NA, "d", "e"),
var3 = c(NA, NA, NA, NA, NA)
)
# Case 1: NA_count = TRUE should issue a warning for NA counts
expect_warning(
column_validation(
data = df,
variables = c("var1", "var2", "var3"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = TRUE
),
regexp = "NA value.*\\("
)
# Case 2: NA_count = FALSE should produce the success message only
expect_message(
column_validation(
data = df,
variables = c("var1", "var2"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = FALSE
),
regexp = "^Validation: Success\\.$"
)
})
test_that("column_validation reports NA counts correctly when NA_count = TRUE", {
df <- data.frame(
var1 = c(1, NA, 3, NA, 5),
var2 = c("a", "b", NA, "d", "e"),
var3 = c(NA, NA, NA, NA, NA)
)
# Case 1: NA_count = TRUE should issue a warning for NA counts
expect_warning(
column_validation(
data = df,
variables = c("var1", "var2", "var3"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = TRUE
),
regexp = "NA value.*\\("
)
# Case 2: NA_count = FALSE should produce the success message only
expect_message(
column_validation(
data = df,
variables = c("var1", "var2"),
variable_type = FALSE,
hardstop = FALSE,
check_constant = FALSE,
NA_count = FALSE
),
regexp = "Validation: Success"
)
})
devtools::document()
rm(list = c("column_validation", "stata_style_join"))
load_all()
devtools::document()
